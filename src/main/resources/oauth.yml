spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            scope: openid,profile,email

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname,profile_image,account_email
            client-name: Kakao

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope: name,email,profile_image
            client-name: Naver

        provider: # 구글은 Spring 기본값을 사용하므로 별도 설정 불필요. 카카오, 네이버는 커스텀 설정 필요.
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 사용자 권한 요청 URL
            token-uri: https://kauth.kakao.com/oauth/token # 엑세스 토큰 요청 URL
            user-info-uri: https://kapi.kakao.com/v2/user/me # 사용자 정보 조회 URL
            user-name-attribute: id # 사용자 고유 식별자 속성 (Kakao는 id 필드 사용)

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 사용자 권한 요청 URL
            token-uri: https://nid.naver.com/oauth2.0/token # 엑세스 토큰 요청 URL
            user-info-uri: https://openapi.naver.com/v1/nid/me # 사용자 정보 조회 URL
            user-name-attribute: response # 사용자 정보는 'response' 내부에 있으므로 이 필드 사용

jwt:
  secret: ${JWT_SECRET_KEY:12345678901234567890123456789012}
  expiration: 86400000 # 24시간